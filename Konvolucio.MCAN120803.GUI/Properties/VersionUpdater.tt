<#@ template language="C#" hostspecific="true" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".txt" #>

//------------------------------------------------------------------------------
// <auto-generated>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     This file is a T4 Text Templete for change automatically this 
//     project files version.
//
//     Affected files:
//
//         1. Assembly Version
//
// • major, minor, build, revision
// • build: minden Release fordításkor nõ.
// • revison: idõbélyeg, ami a 2010.1.1-tól eltelt napok számát mutatja.
//
// </auto-generated>
//------------------------------------------------------------------------------

<#
    string path =  Host.ResolvePath("..");
	var AssemblyFilePath = Path.Combine(path, "Properties\\AssemblyInfo.cs");
	//========================================== Assembly File ==================
     string newVersion = null;
#if !DEBUG
    if (File.Exists(AssemblyFilePath))
    {
        var AssemblyFileData = File.ReadAllText(AssemblyFilePath);

        var asmVerPattern = @"(\[assembly: [\w\.]*Version\("")(?<asmVer>[\d+\.\d+]*)(""\)\])";
        var match = Regex.Match(AssemblyFileData, asmVerPattern);
        var gAsmVer = match.Groups["asmVer"].Value;
        var oldVersion = new Version(gAsmVer);

        // Compile new version  [major.minor.build.revision] = 2.4.99.1
        {
            int RevisionNumber = (int)(DateTime.UtcNow - new DateTime(2010,1,1)).TotalDays;
            newVersion = new Version(oldVersion.Major, oldVersion.Minor, oldVersion.Build + 1, RevisionNumber).ToString();
        }
        // 
        // Set new version in target files
        AssemblyFileData = Regex.Replace(AssemblyFileData, asmVerPattern, m => m.Groups[1].Value + newVersion + m.Groups[2].Value);
        File.WriteAllText(AssemblyFilePath, AssemblyFileData);
    }
#endif
#>